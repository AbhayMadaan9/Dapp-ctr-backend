// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  address String   @unique
  tasks   Task[]
  Payouts Payouts?
}

model Worker {
  id          Int          @id @default(autoincrement())
  address     String       @unique
  submissions Submission[]
  balance     Balance?
}

model Balance {
  id             Int    @id @default(autoincrement())
  pending_amount Int    @default(0)
  locked_amount  Int
  worker_id      Int    @unique
  worker         Worker @relation(fields: [worker_id], references: [id])
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String?      @default("Slect most attractive thumbnail")
  options     Option[]
  signature   String
  amount      String
  user_id     Int
  user        User         @relation(fields: [user_id], references: [id])
  done        Boolean
  submissions Submission[]
}

model Option {
  id          Int          @id @default(autoincrement())
  image_url   String
  task_id     Int
  task        Task         @relation(fields: [task_id], references: [id])
  submissions Submission[]
}

model Submission {
  id        Int    @id @default(autoincrement())
  worker_id Int
  worker    Worker @relation(fields: [worker_id], references: [id])
  option_id Int
  option    Option @relation(fields: [option_id], references: [id])
  task_id   Int
  task      Task   @relation(fields: [task_id], references: [id])
  amount    String

  @@unique([worker_id, task_id])
}

model Payouts {
  id      Int  @id @default(autoincrement())
  amount  Int
  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])
  signature String
  status TxnStatus
}
enum TxnStatus {
  PENDING
  COMPLETED
  FAILED
}
